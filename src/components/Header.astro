---
// Iconos de Lucide. En Astro, importamos los iconos directamente.
// Reemplazaremos lucide-react con lucide-astro o svgs si es necesario.
// Por ahora, usaremos placeholders de texto para Menu y X.
---

<header
  class="fixed top-0 w-full bg-background/80 backdrop-blur-md border-b border-border z-50"
>
  <div class="container mx-auto px-4 py-4 max-w-6xl">
    <div class="flex items-center justify-between">
      <div class="text-xl font-bold text-primary">{"<JayDev />"}</div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-8">
        <a
          href="#experience"
          class="text-foreground hover:text-primary transition-colors"
          >Experiencia</a
        >
        <a
          href="#projects"
          class="text-foreground hover:text-primary transition-colors"
          >Proyectos</a
        >
        <a
          href="#skills"
          class="text-foreground hover:text-primary transition-colors"
          >Habilidades</a
        >
        <a
          href="#learning"
          class="text-foreground hover:text-primary transition-colors"
          >Aprendiendo</a
        >
        <a
          href="#contact"
          class="text-foreground hover:text-primary transition-colors"
          >Contacto</a
        >
      </nav>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="md:hidden p-2 cursor-pointer"
        aria-label="Abrir menú"
      >
        <!-- Usaremos un SVG o un componente de icono más adelante -->
        <svg
          id="menu-icon"
          class="h-6 w-6 pointer-events-none"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16m-7 6h7"></path></svg
        >
        <svg
          id="close-icon"
          class="h-6 w-6 hidden pointer-events-none"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          ><path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path></svg
        >
      </button>
    </div>

    <!-- Mobile Navigation -->
    <nav
      id="mobile-menu"
      class="hidden md:hidden mt-4 pb-4 border-t border-border pt-4"
      data-open="false"
      aria-hidden="true"
      role="navigation"
    >
      <div class="flex flex-col space-y-4">
        <a
          href="#experience"
          class="text-left text-foreground hover:text-primary transition-colors"
          >Experiencia</a
        >
        <a
          href="#projects"
          class="text-left text-foreground hover:text-primary transition-colors"
          >Proyectos</a
        >
        <a
          href="#skills"
          class="text-left text-foreground hover:text-primary transition-colors"
          >Habilidades</a
        >
        <a
          href="#learning"
          class="text-left text-foreground hover:text-primary transition-colors"
          >Aprendiendo</a
        >
        <a
          href="#contact"
          class="text-left text-foreground hover:text-primary transition-colors"
          >Contacto</a
        >
      </div>
    </nav>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // cuando el contenido del DOM se cargue ejecuto este callback
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");

    // Iconos de cierre y apertura del menu
    const menuIcon = document.getElementById("menu-icon");
    const closeIcon = document.getElementById("close-icon");
    const navLinks = mobileMenu?.querySelectorAll("a");

    // Helpers

    // const isOpen = () => mobileMenu?.getAttribute("data-open") === "true";
    // const setOpenState = (open: boolean) => {
    //   mobileMenuButton?.setAttribute("aria-expanded", String(open));
    //   mobileMenu?.setAttribute("aria-hidden", String(!open));
    //   mobileMenu?.setAttribute("data-open", !open ? "false" : "true");
    //   // swap icons if existen
    //   if (menuIcon) menuIcon.classList.toggle("hidden", open);
    //   if (closeIcon) closeIcon.classList.toggle("hidden", open);
    //   // lock body scroll
    //   document.body.style.overflow = open ? "hidden" : "";
    // };

    if (mobileMenuButton && mobileMenu && menuIcon && closeIcon) {
      mobileMenuButton.addEventListener("click", (e) => {
        mobileMenu.classList.toggle("hidden");
        menuIcon.classList.toggle("hidden"); // Uno se va a ocultar
        closeIcon.classList.toggle("hidden"); // y el otro se va a mostrar
      });

      // Cierra el menú cuando se hace clic en un enlace
      navLinks?.forEach((link) => {
        link.addEventListener("click", () => {
          mobileMenu?.classList.add("hidden");
          menuIcon?.classList.remove("hidden");
          closeIcon?.classList.add("hidden");
        });
      });

      // Scroll suave para todos los enlaces de anclaje

      // buscara todos los "a" cuyo href empiece con un #
      document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
        anchor.addEventListener("click", function (e) {
          // e es el objeto del evento (contiene info como qué se clicó, coordenadas, etc.).
          e.preventDefault(); // evita el comportamiento normal, evita el salto inmediato y permite el scroll suave.
          const targetId = this.getAttribute("href");

          //         this se refiere al elemento que disparó el evento (en este caso, el <a> clicado).

          // .getAttribute("href") obtiene el valor literal del atributo href del enlace.
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({
              //             Método nativo de los navegadores que hace scroll automático hasta que el elemento quede visible en pantalla.

              // Opción behavior: "smooth" → hace la animación suave en vez de un salto brusco.
              behavior: "smooth",
            });
          }
        });
      });
    }

    window.addEventListener("click", (e) => {
      console.log(e.target);
      if (
        !mobileMenu?.contains(e.target) &&
        e.target != mobileMenuButton
        // isOpen()
      ) {
        // setOpenState(false);
        // cerrar el menu y actualizar los iconos
        mobileMenu?.classList.add("hidden");
        menuIcon?.classList.remove("hidden");
        closeIcon?.classList.add("hidden");
      }
    });
  });
</script>
